/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  const fs = require("fs")
  const app = express();
  app.use(bodyParser.json());
  
  
  
  
  
  let todos = [];
  
  class Todo {
    constructor(title, description) {
      this.id = Math.floor(Math.random() * 1000000),
        this.title = title,
  
        this.completed = false
      this.description = description
      
  
    }
  }
  
  
  const readFile = async () => {
    try {
      const fileContent = await fs.promises.readFile("./todos.json", 'utf-8');
      todos = JSON.parse(fileContent);
    } catch (err) {
      console.error(`Error reading file: ${err.message}`);
    }
  };
  
  readFile()
  
  const writeFile = async () => {
    try {
      await fs.promises.writeFile("./todos.json", JSON.stringify(todos));
      await readFile(); // Optionally call readFile after writing the file.
    } catch (err) {
      console.error(`Error writing file: ${err.message}`);
    }
  };
  
  
  
  
  
  
  
  app.get("/todos", (req, res) => {
    console.log(todos);
    res.json(todos)
  })
  
  app.get("/todos/:id", (req, res) => {
  
    for (item of todos) {
      if (item.id == req.params.id) {
        return res.json(item);
      }
    }
    res.status(404).send("Not found")
  })
  
  
  app.post("/todos", (req, res) => {
  
    let todo = new Todo(req.body.title, req.body.description);
    todos.push(todo);
    writeFile();
    res.status(201).json(todo);
  })
  
  app.put("/todos/:id", (req, res) => {
    for (item of todos) {
  
      if (item.id == req.params.id) {
  
        item.title = req.body.title !== undefined ? req.body.title : item.title;
        item.completed = req.body.completed !== undefined ? req.body.completed : item.completed;
        item.description = req.body.description !== undefined ? req.body.description : item.description;
        writeFile();
        return res.sendStatus(200)
      }
    }
  
    return res.status(404).send("Not Found")
  })
  
  
  app.delete("/todos/:id", (req, res) => {
    let index = todos.findIndex((item) => item.id == req.params.id);
  
    if (index == -1) {
      return res.status(404).send("Not Found");
    } else {
      todos.splice(index, 1);
      writeFile();
      return res.sendStatus(200);
    }
  })
  
  app.use((req, res) => res.sendStatus(404))
  
  
  
  
  app.listen(3000, () => {
    console.log("listening on 3000");
  });
  
  module.exports = app;